% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/optim_helper.R
\name{enhanceFunctionWithPenalty}
\alias{enhanceFunctionWithPenalty}
\title{Modifies function to return a penalised value for parameters outside boundaries}
\usage{
enhanceFunctionWithPenalty(
  fun,
  l_bound,
  u_bound,
  penalty_fun = function(value, distance) (value + distance) * exp(1000 * distance),
  distance_fun = function(x, l, u) {
     max(0, (l - x)/(u - l), (x - u)/(u - l))
 },
  param_pos = 1,
  ...
)
}
\arguments{
\item{fun}{function to be modified}

\item{l_bound}{vector with lower boundary values}

\item{u_bound}{vector with upper boundary values}

\item{penalty_fun}{function taking value and distance and returns
value modified value depending on distance}

\item{distance_fun}{function that takes x, l_bound and u_bound and computes
the distance of x to the boundaries}

\item{param_pos}{argument position of the parameter}

\item{...}{arguments passed to original function}
}
\value{
a modified function that changes value when parameter outside bounds
}
\description{
The method takes a function as well as values for lower and upper boundaries
and returns a modified function. The modified function returns the value of
the original function when the parameters are within boundaries and a penalised
function otherwise.
}
\details{
Optionally an own function can be supplied to calculate the penalised value.
The function must take two arguments: the original value and the distance
of the parameter to the boundaries.

Additionally an own distance function can be supplied, that has to take three
arguments: the parameter, the lower boundaries and the upper boundaries.

A main use case of this method are optimisation / calibration tasks. If the
optimisation method and the function to optimise are both ignorant to boundaries
one can turn the function into a boundary sensitive one.
}
\examples{
sqr_bd <- enhanceFunctionWithPenalty(\(x) x^2, .1, 10)
sqr_bd(-1)
sqr_bd(1)
sqr_bd(11)

}
